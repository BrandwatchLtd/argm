/*
 * FUNCTIONAL TESTS
 */
\i sql/setup/setup.sql
begin;
create extension argm;
-- create and analyze tables (parallel plans work only on real tables, not on SRFs)
create table test_data_1_20 as select generate_series(1,20) x;
analyze test_data_1_20;
-- force parallel execution and check if it works
do $$
declare
    t text;
begin
    -- 9.6 and 10+ have different paramater names
    perform set_config(param_name, '0', true)
    from unnest('{
       min_parallel_relation_size,
       min_parallel_table_scan_size,
       min_parallel_index_scan_size,
       parallel_setup_cost,
       parallel_tuple_cost
    }'::text[]) param_name
    where param_name in (select name from pg_settings);

    perform set_config('max_parallel_workers_per_gather', '22', true);

    for t in explain select count(*) from test_data_1_20 loop
        if t like '%Gather%' then
            -- Here we can see parallel execution is on
            return;
        end if;
    end loop;
    raise 'Looks like parallel aggregation is off';
end;
$$;
create table tbl2 as 
select d,
       i,
       grp::text || repeat('1', 10) txt,
       grp
from (
       select date'2011-11-11' - di d,
              i
       from generate_series(1, 9) i
       cross join generate_series(1, 8) di
       order by random()
) _
cross join (values
       (1),
       (2),
       (3)
) grp (grp);
analyze tbl2;
select grp, anyold(txt), sum(i) from tbl2 group by grp order by grp;
 grp |   anyold    | sum 
-----+-------------+-----
   1 | 11111111111 | 360
   2 | 21111111111 | 360
   3 | 31111111111 | 360
(3 rows)

\i sql/setup/teardown.sql
rollback;
