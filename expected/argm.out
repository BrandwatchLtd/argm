/*
 * FUNCTIONAL TESTS
 */
\i sql/setup/setup.sql
begin;
create extension argm;
-- create and analyze tables (parallel plans work only on real tables, not on SRFs)
create table test_data_1_20 as select generate_series(1,20) x;
analyze test_data_1_20;
-- force parallel execution and check if it works
do $$
declare
    t text;
begin
    perform set_config('min_parallel_relation_size', '0', true),
            set_config('parallel_setup_cost', '0', true),
            set_config('parallel_tuple_cost', '0', true),
            set_config('max_parallel_workers_per_gather', '22', true);

    for t in explain select count(*) from test_data_1_20 loop
        if t like '%Gather%' then
            -- Here we can see parallel execution is on
            return;
        end if;
    end loop;
    raise 'Looks like parallel aggregation is off';
end;
$$;
create table tbl as 
select d,
       i,
       grp::text || '-' || d || '-' || repeat(i::text, 10) txt,
       grp
from (
       select date'2011-11-11' - di d,
              i
       from generate_series(1, 9) i
       cross join generate_series(1, 8) di
       order by random()
) _
cross join (values
       (1),
       (2),
       (3)
) grp (grp);
analyze tbl;
select grp, argmax(txt, i, d), argmin(array[txt], 1, i, d) from tbl group by grp order by grp;
 grp |         argmax          |          argmin           
-----+-------------------------+---------------------------
   1 | 1-11-10-2011-9999999999 | {1-11-03-2011-1111111111}
   2 | 2-11-10-2011-9999999999 | {2-11-03-2011-1111111111}
   3 | 3-11-10-2011-9999999999 | {3-11-03-2011-1111111111}
(3 rows)

-- TODO: rewrite like this after anonymous record types handling is fixed
-- select grp, argmax(txt, i, d), argmin(array[txt], (i, d)) from tbl group by grp order by grp;
select argmax(1, 2) filter (where false);
 argmax 
--------
       
(1 row)

\i sql/setup/teardown.sql
rollback;
